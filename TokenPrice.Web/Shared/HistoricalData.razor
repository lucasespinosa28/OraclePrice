@using Nethereum.ENS
@inject IJSRuntime JS;

<h3>HistoricalData</h3>
@if (loading)
{
    <div class="progress">
        <div class="progress-bar" role="progressbar" style="width: @Progress%;" aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100">@Progress</div>
    </div>
}
@if (Error.Item1)
{
    <p>@Error.Item2</p>
}
else
{
    <div id="chartDiv"></div>
}
@code {
    [Parameter]
    public string Symbol { get; set; }

    public int Progress { get; set; } = 0;

    public bool loading { get; set; } = true;

    public (bool,string) Error { get; set; } = (false,"");

    public class data
    {
        public long time { get; set; }
        public decimal value { get; set; }
    }
    public List<string> TextTest { get; set; } = new List<string>();
    public List<data> PriceTest { get; set; } = new List<data>();

    protected override async Task OnInitializedAsync()
    {
        string oracleAddress;
        if (Symbol.ToLower() == "eth")
        {
            var ensService = new ENSService(Connect.Web3);
            oracleAddress = await ensService.ResolveAddressAsync($"eth-usd.data.eth");
        }
        else
        {
            var text = $"{Symbol.ToLower()}-eth.data.eth";
            var ensService = new ENSService(Connect.Web3);
            oracleAddress = await ensService.ResolveAddressAsync(text);
        }
        var link = new Chainlink(Connect.Web3);
        var pricefeed = link.Pricefeed(oracleAddress);
        try
        {
            var lastRoundId = await pricefeed.GetLatestRoundDataAsync();
            for (int i = 0; i <100; i++)
            {
                var lastest = (lastRoundId.RoundId - 100) + i;
                var data = await pricefeed.GetRoundDataAsync(lastest.ToString());
                PriceTest.Add(new data { time = data.UpdatedAt, value = Web3.Convert.FromWei(data.Answer) });
                TextTest.Add($"{data.UpdatedAt} {(double)data.Answer/1e8}");
                Progress++;
                StateHasChanged();
            }
            await JS.InvokeVoidAsync("TradingView", PriceTest);
        }
        catch (Exception e)
        {
            Error = (true,"Price not found");
        }
        loading = false;
    }
}
